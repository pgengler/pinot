## Sample initialization file for pinot.
##
## Please note that you must have configured pinot with --enable-pinotrc
## for this file to be read!  Also note that this file should not be in
## DOS or Mac format, and that characters specially interpreted by the
## shell should not be escaped here.
##
## To make sure a value is disabled, use "unset <option>".
##
## For the options that take parameters, the default value is given.
## Other options are unset by default.
##
## Quotes inside string parameters don't have to be escaped with
## backslashes.  The last double quote in the string will be treated as
## its end.  For example, for the "brackets" option, ""')>]}" will match
## ", ', ), >, ], and }.

## Use auto-indentation.
# set autoindent

## Backup files to filename~.
# set backup

## The directory to put unique backup files in.
# set backupdir ""

## Do backwards searches by default.
# set backwards

## Use bold text instead of reverse video text.
# set boldtext

## The characters treated as closing brackets when justifying
## paragraphs.  They cannot contain blank characters.  Only closing
## punctuation, optionally followed by closing brackets, can end
## sentences.
##
# set brackets ""')>]}"

## Do case sensitive searches by default.
# set casesensitive

## Constantly display the cursor position in the statusbar.  Note that
## this overrides "quickblank".
# set const

## Use cut to end of line by default.
# set cut

## Set the line length for wrapping text and justifying paragraphs.
## If fill is 0 or less, the line length will be the screen width less
## this number.
##
# set fill -8

## Enable ~/.pinot_history for saving and reading search/replace strings.
# set historylog

## Enable vim-style lock-files.  This is just to let a vim user know you
## are editing a file [s]he is trying to edit and vice versa. There are
## no plans to implement vim-style undo state in these files.
# set locking

## The opening and closing brackets that can be found by bracket
## searches.  They cannot contain blank characters.  The former set must
## come before the latter set, and both must be in the same order.
##
# set matchbrackets "(<[{)>]}"

## Use the blank line below the titlebar as extra editing space.
# set morespace

## Enable mouse support, if available for your system.  When enabled,
## mouse clicks can be used to place the cursor, set the mark (with a
## double click), and execute shortcuts.  The mouse will work in the X
## Window System, and on the console when gpm is running.
##
# set mouse

## Allow multiple file buffers (inserting a file will put it into a
## separate buffer).  You must have configured with --enable-multibuffer
## for this to work.
##
# set multibuffer

## Don't convert files from DOS/Mac format.
# set noconvert

## Don't follow symlinks when writing files.
# set nofollow

## Don't display the helpful shortcut lists at the bottom of the screen.
# set nohelp

## Don't add newlines to the ends of files.
# set nonewlines

## Don't wrap text at all.
# set nowrap

## Set operating directory.  pinot will not read or write files outside
## this directory and its subdirectories.  Also, the current directory
## is changed to here, so any files are inserted from this dir.  A blank
## string means the operating directory feature is turned off.
##
# set operatingdir ""

## Preserve the XON and XOFF keys (^Q and ^S).
# set preserve

## The characters treated as closing punctuation when justifying
## paragraphs.  They cannot contain blank characters.  Only closing
## punctuation, optionally followed by closing brackets, can end
## sentences.
##
# set punct "!.?"

## Do quick statusbar blanking.  Statusbar messages will disappear after
## 1 keystroke instead of 26.  Note that "const" overrides this.
##
# set quickblank

## The email-quote string, used to justify email-quoted paragraphs.
## This is an extended regular expression if your system supports them,
## otherwise a literal string.  Default:
# set quotestr "^([ 	]*[#:>\|}])+"
## if you have extended regular expression support, otherwise:
# set quotestr "> "

## Fix Backspace/Delete confusion problem.
# set rebinddelete

## Fix numeric keypad key confusion problem.
# set rebindkeypad

## Do extended regular expression searches by default.
# set regexp

## Make the Home key smarter.  When Home is pressed anywhere but at the
## very beginning of non-whitespace characters on a line, the cursor
## will jump to that beginning (either forwards or backwards).  If the
## cursor is already at that position, it will jump to the true
## beginning of the line.
# set smarthome

## Use smooth scrolling as the default.
# set smooth

## Enable soft line wrapping (AKA full line display).
# set softwrap

## Use this spelling checker instead of the internal one.  This option
## does not properly have a default value.
##
# set speller "aspell -x -c"

## Allow pinot to be suspended.
# set suspend

## Use this tab size instead of the default; it must be greater than 0.
# set tabsize 8

## Convert typed tabs to spaces.
# set tabstospaces

## Save automatically on exit, don't prompt.
# set tempfile

## Enable the new (EXPERIMENTAL) generic undo code, not just for line
## cuts.
# set undo

## Disallow file modification.  Why would you want this in an rcfile? ;)
# set view

## The two single-column characters used to display the first characters
## of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in
## ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.
# set whitespace "  "

## Detect word boundaries more accurately by treating punctuation
## characters as parts of words.
# set wordbounds


## Color setup
##
## Format:
##
## syntax "short description" ["filename regex" ...]
##
## The "none" syntax is reserved; specifying it on the command line is
## the same as not having a syntax at all.  The "default" syntax is
## special: it takes no filename regexes, and applies to files that
## don't match any other syntax's filename regexes.
##
## header "regexp"
##
## If this regular expression matches the first line of a file then this
## syntax block will be applied, regardless of whether the file matches
## the filename regular expression. Note that this is only checked at the
## time the file is opened; if you add, remove, or modify a file's header
## the syntax highlighting won't automatically update.
##
## magic "regexp"
##
## If pinot was compiled with libmagic support, then the "magic" for a file
## is checked against the given regular expression. If it matches, then the
## syntax block will be applied to the file (again, regardless of whether the
## file matches the filename regexp for the syntax block).
##
## color foreground,background "regex" ["regex"...]
## or
## icolor foreground,background "regex" ["regex"...]
##
## "color" will do case sensitive matches, while "icolor" will do case
## insensitive matches.
##
## Valid colors: white, black, red, blue, green, yellow, magenta, cyan.
## For foreground colors, you may use the prefix "bright" to get a
## stronger highlight.
##
## To use multi-line regexes, use the start="regex" end="regex"
## [start="regex" end="regex"...] format.
##
## If your system supports transparency, not specifying a background
## color will use a transparent color.  If you don't want this, be sure
## to set the background color to black or white.
##
## If you wish, you may put your syntaxes in separate files.  You can
## make use of such files (which can only include "syntax", "color", and
## "icolor" commands) as follows:
##
## include "/path/to/syntax_file.pinotrc"
##
## Unless otherwise noted, the name of the syntax file (without the
## ".pinotrc" extension) should be the same as the "short description"
## name inside that file.  These names are kept fairly short to make
## them easier to remember and faster to type using pinot's -Y option.
##
## All regexes should be extended regular expressions.

## Key bindings
## Please see pinotrc(5) for more details on this
##
## Here are some samples to get you going
##
# bind M-W nowrap main
# bind M-A casesens search
# bind ^S research main

## Set this if your backspace key sends delete most of the time (2.1.3+)
# bind kdel backspace all


## pinotrc files
# include "@PKGDATADIR@/pinotrc.pinotrc"

## C/C++
# include "@PKGDATADIR@/c.pinotrc"

## Makefiles
# include "@PKGDATADIR@/makefile.pinotrc"

## Cascading Style Sheets
# include "@PKGDATADIR@/css.pinotrc"

## Debian files
# include "@PKGDATADIR@/debian.pinotrc"

## Gentoo files
# include "@PKGDATADIR@/gentoo.pinotrc"

## HTML
# include "@PKGDATADIR@/html.pinotrc"

## PHP
# include "@PKGDATADIR@/php.pinotrc"

## TCL
# include "@PKGDATADIR@/tcl.pinotrc"

## TeX
# include "@PKGDATADIR@/tex.pinotrc"

## Quoted emails (under e.g. mutt)
# include "@PKGDATADIR@/mutt.pinotrc"

## Patch files
# include "@PKGDATADIR@/patch.pinotrc"

## Manpages
# include "@PKGDATADIR@/man.pinotrc"

## Groff
# include "@PKGDATADIR@/groff.pinotrc"

## Perl
# include "@PKGDATADIR@/perl.pinotrc"

## Python
# include "@PKGDATADIR@/python.pinotrc"

## Ruby
# include "@PKGDATADIR@/ruby.pinotrc"

## Java
# include "@PKGDATADIR@/java.pinotrc"

## Fortran
# include "@PKGDATADIR@/fortran.pinotrc"

## Objective-C
# include "@PKGDATADIR@/objc.pinotrc"

## OCaml
# include "@PKGDATADIR@/ocaml.pinotrc"

## AWK
# include "@PKGDATADIR@/awk.pinotrc"

## Assembler
# include "@PKGDATADIR@/asm.pinotrc"

## Bourne shell scripts
# include "@PKGDATADIR@/sh.pinotrc"

## POV-Ray
# include "@PKGDATADIR@/pov.pinotrc"

## XML-type files
# include "@PKGDATADIR@/xml.pinotrc"
